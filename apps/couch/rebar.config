%%-*- mode: erlang -*-



% SET(COUCH_PRIV_PREFIX ${COUCH_LIB_DIR}/priv)
% SET(COUCH_PRIV_LIB_PREFIX ${COUCH_PRIV_PREFIX}/lib)

% SET(COUCH_ICU_SRC icu_driver/couch_icu_driver.c)

% CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/stat_descriptions.cfg.in
%                ${CMAKE_CURRENT_BINARY_DIR}/stat_descriptions.cfg)

% INCLUDE_DIRECTORIES(BEFORE ${ICU_INCLUDE_DIR}
%                            ${ERLANG_INCLUDE_PATH})

% ADD_DEFINITIONS(-DXP_UNIX)

% ADD_LIBRARY(couch_icu_driver MODULE ${COUCH_ICU_SRC})
% SET_TARGET_PROPERTIES(couch_icu_driver PROPERTIES PREFIX "")
% TARGET_LINK_LIBRARIES(couch_icu_driver ${COUCHBASE_UNRESOLVED} ${ICU_LIBRARIES})

% SET(COUCH_EJSON_COMPARE_SRC couch_ejson_compare/couch_ejson_compare.c
%                             couch_ejson_compare/couch_raw_json_compare.c
%                             couch_ejson_compare/couch_ejson_compare_utils.c)

% ADD_LIBRARY(couch_ejson_compare MODULE ${COUCH_EJSON_COMPARE_SRC})
% SET_TARGET_PROPERTIES(couch_ejson_compare PROPERTIES PREFIX "")
% TARGET_LINK_LIBRARIES(couch_ejson_compare ${COUCHBASE_UNRESOLVED} ${ICU_LIBRARIES})

% INSTALL(TARGETS couch_icu_driver couch_ejson_compare
%         DESTINATION ${COUCH_PRIV_LIB_PREFIX})

% INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/stat_descriptions.cfg
%         DESTINATION ${COUCH_PRIV_PREFIX})



{port_specs, [
  {"priv/couch_icu_driver.so", ["c_src/couch_icu_driver.c"]},
  {"priv/couch_ejson_compare.so", ["c_src/couch_ejson_compare.c", "c_src/couch_raw_json_compare.c", "c_src/couch_ejson_compare_utils.c"]}
]}.
{port_env, [
  {"CFLAGS", "$CFLAGS -I/usr/local/include `pkg-config --cflags icu-uc icu-io` -g"},
  {"LDFLAGS", "$LDFLAGS `pkg-config --libs icu-uc icu-io` -g"}
]}.

{erl_opts, [
            debug_info,
            {parse_transform, lager_transform},
            warnings_as_errors,
            warn_format,
            %% warn_export_all,
            warn_export_vars,
            warn_obsolete_guard,
            warn_bif_clash
            %% warn_missing_spec,
            %% warn_untyped_record
           ]}.


%{eunit_opts, [verbose, {report,{eunit_surefire,[{dir,"."}]}}]}.
%{cover_enabled, true}.
